generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model izinkeluar {
  izin_id         Int              @id @default(autoincrement())
  reason          String           @db.VarChar(255)
  date_requested  DateTime         @db.Date
  // Waktu submit pengajuan (jam tanggal submit)
  submitted_at    DateTime      @default(now()) @db.Timestamp(0)
  // Waktu keluar dan kembali
  date_out        DateTime?        @db.DateTime
  date_return     DateTime?        @db.DateTime
  status          String?          @default("pending") @db.VarChar(50)
  document        String?          @db.VarChar(255)
  date_approved   DateTime?
  notes           String?          @db.VarChar(255)
  Pengelola_id    Int?
  mahasiswa_id    Int
  pengelolaasrama pengelolaasrama? @relation(fields: [Pengelola_id], references: [Pengelola_id], map: "izinkeluar_ibfk_1")
  mahasiswa       mahasiswa        @relation(fields: [mahasiswa_id], references: [mahasiswa_id], onDelete: Cascade, map: "izinkeluar_ibfk_2")

  @@index([Pengelola_id], map: "Pengelola_id")
  @@index([date_requested], map: "idx_izinkeluar_date")
  @@index([submitted_at], map: "idx_izinkeluar_submitted_at")
  @@index([date_out], map: "idx_izinkeluar_date_out")
  @@index([date_return], map: "idx_izinkeluar_date_return")
  @@index([mahasiswa_id], map: "mahasiswa_id")
}

model mahasiswa {
  mahasiswa_id Int @id @default(autoincrement())
  nim String @unique(map: "nim") @db.VarChar(50)
  nama String @db.VarChar(50)
  jurusan String? @db.VarChar(100)
  foto String? @db.VarChar(255)
  status String? @default("aktif") @db.VarChar(50)
  kipk String? @default("ya") @db.VarChar(10)
  user_id String @db.VarChar(50)
  izinkeluar izinkeluar[]
  user user @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "mahasiswa_ibfk_1")
  pelaporankerusakan pelaporankerusakan[]
  pembayaran pembayaran[]
  suratbebasasrama suratbebasasrama[]
  
  @@index([nim], map: "idx_mahasiswa_nim")
  @@index([user_id], map: "user_id")
}

model pelaporankerusakan {
  laporan_id      Int              @id @default(autoincrement())
  jenis           String?          @db.VarChar(100)
  description     String           @db.VarChar(255)
  status          String?          @default("ditinjau") @db.VarChar(50)
  date_submitted  DateTime         @default(now())
  photo           String?          @db.VarChar(255)
  location        String?          @db.VarChar(255)
  mahasiswa_id    Int
  Pengelola_id    Int?
  mahasiswa       mahasiswa        @relation(fields: [mahasiswa_id], references: [mahasiswa_id], onDelete: Cascade, map: "pelaporankerusakan_ibfk_1")
  pengelolaasrama pengelolaasrama? @relation(fields: [Pengelola_id], references: [Pengelola_id], map: "pelaporankerusakan_ibfk_2")

  @@index([Pengelola_id], map: "Pengelola_id")
  @@index([date_submitted], map: "idx_pelaporan_date")
  @@index([mahasiswa_id], map: "mahasiswa_id")
}
model pembayaran {
  pembayaran_id     Int                   @id @default(autoincrement())
  amount            Decimal               @db.Decimal(12, 2)         // jumlah dibayar
  payment_date      DateTime              @default(now())            // tanggal bayar
  bukti_pembayaran  String?               @db.VarChar(255)           // file bukti
  status_bukti      StatusBuktiPembayaran @default(BELUM_DIVERIFIKASI)

  mahasiswa_id      Int
  surat_id          Int                   // foreign key ke suratbebasasrama

  mahasiswa         mahasiswa             @relation(fields: [mahasiswa_id], references: [mahasiswa_id], onDelete: Cascade, map: "pembayaran_ibfk_1")
  suratbebasasrama  suratbebasasrama      @relation(fields: [surat_id], references: [Surat_id], onDelete: Cascade, map: "pembayaran_ibfk_2")

  @@index([mahasiswa_id], map: "mahasiswa_id")
  @@index([payment_date], map: "idx_pembayaran_date")
  @@index([surat_id], map: "surat_id")
}


model pemberitahuan {
  pemberitahuan_id Int      @id @default(autoincrement())
  title            String
  content          String
  date             DateTime @default(now())
  image            String?
  Pengelola_id     Int

  pengelolaasrama  pengelolaasrama @relation(fields: [Pengelola_id], references: [Pengelola_id])

  @@index([Pengelola_id], map: "Pengelola_id")
  @@index([date], map: "idx_pemberitahuan_date")
}


model pengelolaasrama {
  Pengelola_id       Int                  @id @default(autoincrement())
  user_id            String               @db.VarChar(50)
  izinkeluar         izinkeluar[]
  pelaporankerusakan pelaporankerusakan[]
  pemberitahuan      pemberitahuan[]
  user               user                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "pengelolaasrama_ibfk_1")
  suratbebasasrama   suratbebasasrama[]

  @@index([user_id], map: "user_id")
}

model suratbebasasrama {
  Surat_id           Int      @id @default(autoincrement())
  nomor_pengajuan    String   @unique @db.VarChar(50)
  tanggal_pengajuan DateTime @default(now())
  tanggal_update     DateTime? @updatedAt
  total_biaya        Decimal  @db.Decimal(12, 2)
  status_pengajuan   StatusPengajuan @default(VERIFIKASI_FASILITAS)
  fasilitas_status   String?  @db.VarChar(100)
  biaya_tambahan     Decimal? @db.Decimal(12, 2)

  mahasiswa_id       Int
  Pengelola_id       Int?

  mahasiswa          mahasiswa @relation(fields: [mahasiswa_id], references: [mahasiswa_id], onDelete: Cascade, map: "suratbebasasrama_ibfk_1")
  pengelolaasrama    pengelolaasrama? @relation(fields: [Pengelola_id], references: [Pengelola_id], map: "suratbebasasrama_ibfk_2")
  pembayaran         pembayaran[]

  // TAMBAHKAN RELASI BARU DI BAWAH INI
  kerusakanFasilitas KerusakanFasilitas[]

  @@index([Pengelola_id], map: "Pengelola_id")
  @@index([mahasiswa_id], map: "mahasiswa_id")
  @@index([tanggal_pengajuan], map: "idx_surat_tanggal")
}

model notification {
  notification_id Int      @id @default(autoincrement())
  title          String
  message        String
  type           String   // 'surat_bebas_asrama', 'pemberitahuan', 'status_update'
  is_read        Boolean  @default(false)
  created_at     DateTime @default(now())
  user_id        String   @db.VarChar(50)
  user           user     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  reference_id   String?  // ID referensi (misal: ID surat bebas asrama atau pemberitahuan)
  
  @@index([user_id])
  @@index([created_at])
  @@index([is_read])
}

model user {
  user_id         String            @id @db.VarChar(50)
  name            String            @db.VarChar(50)
  email           String            @unique(map: "email") @db.VarChar(50)
  password        String            @db.VarChar(100)
  role            String            @db.VarChar(50)
  mahasiswa       mahasiswa[]
  pengelolaasrama pengelolaasrama[]
  notifications   notification[]

  @@index([email], map: "idx_user_email")
}

model KerusakanFasilitas {
  id               Int      @id @default(autoincrement())
  nama_fasilitas   String   @db.VarChar(255)
  biaya_kerusakan  Decimal  @db.Decimal(12, 2)
  
  // Kunci asing untuk menghubungkan ke suratbebasasrama
  surat_id          Int
  suratbebasasrama  suratbebasasrama @relation(fields: [surat_id], references: [Surat_id], onDelete: Cascade)

  @@index([surat_id])
}

enum StatusPengajuan {
  VERIFIKASI_FASILITAS
  MENUNGGU_PEMBAYARAN
  VERIFIKASI_PEMBAYARAN
  SELESAI
}

enum StatusBuktiPembayaran {
  BELUM_DIVERIFIKASI
  VALID
  TIDAK_VALID
}
